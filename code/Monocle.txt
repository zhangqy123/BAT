library(monocle)
library(DDRTree)
library(pheatmap)
library(plyr)
library(data.table)
load(.RData)
sce <- importCDS(pbmc)
sce <- estimateSizeFactors(sce)
sce <- estimateDispersions(sce)
sce <- detectGenes(sce, min_expr = 0.1)
expressed_genes <- row.names(subset(fData(sce),
                                    num_cells_expressed >= 10))
pData(sce)$Total_mRNAs <- Matrix::colSums(exprs(sce))
sce <- sce[, pData(sce)$Total_mRNAs < 1e6 ]
upper_bound <- 10^(mean(log10(pData(sce)$Total_mRNAs)) +
                   2*sd(log10(pData(sce)$Total_mRNAs)))
lower_bound <- 10^(mean(log10(pData(sce)$Total_mRNAs)) -
                   2*sd(log10(pData(sce)$Total_mRNAs)))
qplot(Total_mRNAs, data = pData(sce), color = orig.ident, geom = "density") +
    geom_vline(xintercept = lower_bound) +
    geom_vline(xintercept = upper_bound)
sce <- sce[,pData(sce)$Total_mRNAs > lower_bound &
            pData(sce)$Total_mRNAs < upper_bound]
sce <- detectGenes(sce, min_expr = 0.1)
L <- log(exprs(sce[expressed_genes,]))
melted_dens_df <- melt(Matrix::t(scale(Matrix::t(L))))
qplot(value, geom = "density", data = melted_dens_df) +
  stat_function(fun = dnorm, size = 0.5, color = 'red') +
  xlab("Standardized log(counts)") +
  ylab("Density")
  
disp_table <- dispersionTable(sce)
unsup_clustering_genes <- subset(disp_table, mean_expression >= 0.1)
sce <- setOrderingFilter(sce, unsup_clustering_genes$gene_id)
plot_ordering_genes(sce)
plot_pc_variance_explained(sce, return_all = F) 
sce <- reduceDimension(sce, max_components = 2, num_dim = 6, reduction_method = 'tSNE', verbose = T)
sce <- clusterCells(sce, num_clusters = 2)
plot_cell_clusters(sce, 1, 2, color = "CellType",
    markers = c("MYF5", "ANPEP"))
plot_cell_clusters(sce, 1, 2, color = "orig.ident")

diff_test_res <- differentialGeneTest(sce[expressed_genes,],
                      fullModelFormulaStr = "~orig.ident")
sce_ordering_genes <- row.names(subset(diff_test_res, qval < 0.01))
sce <- setOrderingFilter(sce, ordering_genes = sce_ordering_genes)
plot_ordering_genes(sce)

sce <- reduceDimension(sce, max_components = 2,
    method = 'DDRTree')
sce <- orderCells(sce)
plot_cell_trajectory(sce, color_by = "orig.ident")
plot_cell_trajectory(sce, color_by = "State")
GM_state <- function(cds){
  if (length(unique(pData(cds)$State)) > 1){
    T0_counts <- table(pData(cds)$State, pData(cds)$orig.ident)[,"0"]
    return(as.numeric(names(T0_counts)[which
          (T0_counts == max(T0_counts))]))
  } else {
    return (1)
  }
}
sce <- orderCells(sce, root_state = GM_state(sce))
plot_cell_trajectory(sce, color_by = "Pseudotime")

plot_cell_trajectory(sce, color_by = "State") +
    facet_wrap(~State, nrow = 1)
blast_genes <- row.names(subset(fData(sce),
gene_short_name %in% c("CCNB2", "MYOD1", "MYOG")))
plot_genes_jitter(sce[blast_genes,],
    grouping = "State",
    min_expr = 0.1)
HSMM_expressed_genes <-  row.names(subset(fData(sce),
num_cells_expressed >= 10))
HSMM_filtered <- sce[HSMM_expressed_genes,]
my_genes <- row.names(subset(fData(HSMM_filtered),
          gene_short_name %in% c("CDK1", "MEF2C", "MYH3")))
cds_subset <- HSMM_filtered[my_genes,]
plot_genes_in_pseudotime(cds_subset, color_by = "State")
plot_genes_in_pseudotime(cds_subset, color_by = "orig.ident")
 

diff_test_res <- differentialGeneTest(sce,
              fullModelFormulaStr = "~sm.ns(Pseudotime)")
sig_gene_names <- row.names(subset(diff_test_res, qval < 0.1))
plot_pseudotime_heatmap(sce[sig_gene_names,],
                num_clusters = 3,
                cores = 1,
                show_rownames = T)

marker_genes <- row.names(subset(fData(sce),
                   gene_short_name %in% c("MEF2C", "MEF2D", "MYF5",
                                          "ANPEP", "PDGFRA","MYOG")))
diff_test_res <- differentialGeneTest(sce[marker_genes,],
              fullModelFormulaStr = "~sm.ns(Pseudotime)")
sig_gene_names <- row.names(subset(diff_test_res, qval < 0.1))
plot_pseudotime_heatmap(sce[sig_gene_names,],
                num_clusters = 3,
                cores = 1,
                show_rownames = T)										  